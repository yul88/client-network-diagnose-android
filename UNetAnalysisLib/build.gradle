import com.android.build.gradle.AppPlugin
import com.android.build.gradle.LibraryPlugin
import proguard.gradle.ProGuardTask

apply plugin: 'com.android.library'

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'net.sf.proguard:proguard-gradle:5.2.1'
    }
}

android {
    compileSdkVersion 29

    defaultConfig {
        //minSdkVersion 16
        minSdkVersion 19
        targetSdkVersion 29
        versionCode 11
        versionName "2.1.0"
        // Enabling multidex support.
        multiDexEnabled true

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            jniDebuggable true
            buildConfigField('String', 'UCLOUD_API_IPIP', toJavaCodeString(UCLOUD_API_IPIP))
            buildConfigField('String', 'UCLOUD_API', toJavaCodeString(UCLOUD_API))
            buildConfigField('String', 'PROJECT_ID', toJavaCodeString(PROJECT_ID))
            buildConfigField('String', 'TOPIC_ID', toJavaCodeString(TOPIC_ID))
            buildConfigField('String', 'VERSION_NAME', toJavaCodeString("2.1.0"))
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            jniDebuggable false
            buildConfigField('String', 'UCLOUD_API_IPIP', toJavaCodeString(UCLOUD_API_IPIP))
            buildConfigField('String', 'UCLOUD_API', toJavaCodeString(UCLOUD_API))
            buildConfigField('String', 'PROJECT_ID', toJavaCodeString(PROJECT_ID))
            buildConfigField('String', 'TOPIC_ID', toJavaCodeString(TOPIC_ID))
            buildConfigField('String', 'VERSION_NAME', toJavaCodeString("2.1.0"))
        }
    }
    lintOptions {
        abortOnError false
    }
    packagingOptions {
        exclude 'META-INF/INDEX.LIST'
        exclude 'META-INF/DEPENDENCIES'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.appcompat:appcompat:1.2.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'
    implementation platform('com.google.cloud:libraries-bom:26.14.0')
    implementation 'com.google.cloud:google-cloud-pubsub'
    implementation 'androidx.multidex:multidex:2.0.1'
}


class Utils {
    static def r = new Random(System.currentTimeMillis())
}

static String toJavaCodeString(String string) {
    byte[] b = string.getBytes()
    int c = b.length
    StringBuffer sb = new StringBuffer()

    sb.append("new Object(){")
    sb.append("int t;")
    sb.append("public String toString() {")
    sb.append("byte[] buf = new byte[")
    sb.append(c)
    sb.append("];")

    for (int i = 0; i < c; ++i) {
        int t = Utils.r.nextInt()
        int f = Utils.r.nextInt(24) + 1

        t = (t & ~(0xff << f)) | (b[i] << f)

        sb.append("t = ")
        sb.append(t)
        sb.append(";")
        sb.append("buf[")
        sb.append(i)
        sb.append("] = (byte) (t >>> ")
        sb.append(f)
        sb.append(");")
    }

    sb.append("return new String(buf);")
    sb.append("}}.toString()")

    return sb.toString()
}

//task makeJar(type: Copy) {
//    delete 'build/outputs/BSBandLib.jar'
//    from('build/intermediates/bundles/release/')
//    into('build/outputs/')
//    include('classes.jar')
//    rename('classes.jar', 'BSBandLib.jar')
//}

//makeJar.dependsOn(build)

task clearJar(type: Delete) {
    delete 'build/libs/UNetAnalysisLib.jar'
    delete 'build/libs/proguard-UNetAnalysisLib.jar'
}

task makeJar(dependsOn: ['clearJar', 'build', 'compileReleaseJavaWithJavac'], type: Jar) {
    //指定生成的jar名
    appendix = "demo"
    getArchiveBaseName().set("UNetAnalysisLib")
    version = "1.0.0"
    classifier = "release"
    //后缀名
    getArchiveExtension().set("jar")
    //最终的 Jar 包名，如果没设置，默认为 [baseName]-[appendix]-[version]-[classifier].[extension]
    archiveName = "CCBWristBand_jd.jar"
    //需打包的资源所在的路径集
    from(project.zipTree("libs/依赖的第三方库"))
    //初始化资源路径集
    from project.buildDir.absolutePath + "/intermediates/javac/release/classes"
    //打包到jar后的目录结构
    into('cn/com/jd/')
    //去除路径集下部分的资源
    exclude "**/BuildConfig.class"
    exclude "**/R.class"
    exclude "android/**"
    exclude { it.name.startsWith('R$') }
    //只导入资源路径集下的部分资源
    //    include "org/chaos/demo/jar/**/*.class"
    //注: exclude include 支持可变长参数
}

makeJar.dependsOn(build)

task makeProguardJar(dependsOn: ['makeJar'], type: ProGuardTask) {
    //Android 默认的 proguard 文件
    configuration project.android.getDefaultProguardFile('proguard-android.txt')
    //manifest 注册的组件对应的 proguard 文件
    configuration project.buildDir.absolutePath + "/intermediates/proguard-rules/release/aapt_rules.txt"
    configuration 'proguard-rules.pro'
    String inJar = makeJar.getArchiveFile().get().getAsFile().getAbsolutePath()
    print("this is log:" + inJar)
    //输入 jar
    injars inJar
    //输出 jar
    outjars inJar.substring(0, inJar.lastIndexOf(File.separator)) + "/proguard-${makeJar.archiveName}"
    //设置不删除未引用的资源(类，方法等)
    dontshrink
    Plugin plugin = getPlugins().hasPlugin(AppPlugin) ?
            getPlugins().findPlugin(AppPlugin) :
            getPlugins().findPlugin(LibraryPlugin)
    if (plugin != null) {
        List<String> runtimeJarList
        if (project.android.getMetaClass().getMetaMethod("getBootClasspath")) {
            runtimeJarList = project.android.getBootClasspath()
        } else if (plugin.extension.getMetaClass().getMetaMethod("getBootClasspath")) {
            runtimeJarList = plugin.extension.getBootClasspath()
        } else if (plugin.getMetaClass().getMetaMethod("getRuntimeJarList")) {
            runtimeJarList = plugin.getRuntimeJarList()
        } else if (plugin.getMetaClass().getMetaMethod("getBootClasspath")) {
            runtimeJarList = plugin.getBootClasspath()
        }
        if (runtimeJarList != null) {
            for (String runtimeJar : runtimeJarList) {
                //给 proguard 添加 runtime
                libraryjars(runtimeJar)
            }
        }
    }
}

